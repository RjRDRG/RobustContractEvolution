# -*- coding: utf-8 -*-
from typing import List, Tuple, Optional

from proxy.http.proxy import HttpProxyBasePlugin
from proxy.http.parser import HttpParser

MODIFIED_BODY = b'{"key": "modified"}'

class AdapterPlugin(HttpProxyBasePlugin):

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        # Create a new http protocol parser for response payloads
        self.response = HttpParser(httpParserTypes.RESPONSE_PARSER)

    def handle_client_request(
            self, request: HttpParser,
    ) -> Optional[HttpParser]:
        if request.body:
            request.update_body(
                MODIFIED_BODY,
                content_type=b'application/json',
            )
        return request

    def handle_upstream_chunk(self, chunk: memoryview) -> Optional[memoryview]:
        self.response.parse(chunk)
        if self.response.is_complete:
            if self.response.is_chunked_encoded:
                self.response.body = b'\n'.join(self.DEFAULT_CHUNKS) + b'\n'
            self.client.queue(memoryview(self.response.build_response()))
        return None
